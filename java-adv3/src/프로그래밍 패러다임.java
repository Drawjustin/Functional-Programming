/**
 * 프로그래밍 패러다임
 *
 * 명령형 프로그래밍 (Imperative)
 * - 절차지향 프로그래밍 (Procedural)
 * - 객체지향 프로그래밍 (OOP)
 *
 * 선언형 프로그래밍 (Declarative)
 * - 함수형 프로그래밍 (Functional)
 *
 *
 * 명령형 프로그래밍(Imperative Programming)
 * 프로그램이 어떻게(How) 동작해야 하는지 세세한 제어 흐름을 통해 기술
 * 대표적인 하위 스타일로 절차지향(Procedural)과 객체지향(OOP)을 포함
 * - 절차지향은 프로시저, 함수를 기반으로 로직을 절차적으로 구성
 * - 객체지향은 데이터(필드)와 함수(메서드)를 하나로 묶은 객체를 중심으로 설계
 *
 *
 * 선언형 프로그래밍(Declarative Programming)
 * 무엇(What)을 해야 하는지에 초점을 맞추어, 목적을 선언하고 구현 방식은 추상화
 * 대표적인 예로 함수형 프로그래밍(Functional), SQL, HTML 등이 있음
 * - 함수형 프로그래밍은 순수 함수를 조합하며, 부수 효과와 가변 상태를 최소화하여 로직을 표현
 *
 * 명령형 프로그래밍 (Imperative Programming)
 * 핵심 개념: 어떻게(How) 할 것인지 구체적으로 명령(Instruction)을 내리는 방식
 * 특징
 * - 프로그램이 어떤 순서와 단게로 동작해야 하는지를 구체적인 제어 흐름(조건문,반복문)으로 기술
 * - 변수의 값이 바뀌면서 상태(state)가 변해감
 * - CPU의 동작방식(메모리 수정, 제어 흐름에 따른 실행)과 유사하여 전통적인 하드웨어와의 직관적인 일치
 * 예시: C,C++,Java 등 대부분의 언어가 명령형 특성을 지님
 *
 * 장단점
 * - 장점 : 컴퓨터의 동작방식와 매우 유사해 이해하기 직관적,제어 흐름을 상세히 제어하기 쉽다
 * - 단점 : 프로그램 규모가 커지면 상태 변경에 따른 복잡도가 증가
 *
 *
 * 절차지향 프로그래밍 (Procedural Programming)
 * 핵심 개념 : 명령형 프로그래밍의 대표적인 형태로, 프로그램을 절차(Procedure)나 함수(Function) 단위로 나누어 순서대로 실행
 * 특징
 * - 명령형 패러다임의 하위 개념으로 볼 수 있음
 * - 공통된 로직을 재사용하기 위해 함수나 프로시저를 만들어 사용
 * - "데이터와 절차가 분리되어 있다"라는 말로도 자주 설명됨. 즉, 함수(절차)는 별도로 정의해 두고,여러 데이터에 대해 같은 절차를 적용
 * - 예시: C, Pascal 등
 * 장단점
 * - 장점: 구조적 프로그래밍 기법(모듈화, 함수화)으로 코드 가독성 상승, 코드 재사용성 향상
 * - 단점: 데이터와 로직이 명확히 분리되지 않을 때, 코드 유지 보수가 어렵고 대형 프로젝트에서 복잡성 증가
 *
 *
 *
 * 객체지향 프로그래밍 (Object-Oriented Programming)
 * 핵심 개념 : 프로그램을 객체(Object)라는 추상화된 단위로 구성. 각 객체는 상태(필드, 속성)와 행동(메서드)을 가지고 있으며 메시지 교환(메서드 호출)을 통해 상호작용
 * 특징
 * - 캡슐화(Encapsulation), 추상화(Abstraction), 상속(Inheritance), 다형성(Polymorphism)과 같은 특징이 있음
 * - 데이터와 해당 데이터를 처리하는 함수를 하나의 객체로 묶어서 관리해 유지보수성과 확장성을 높인다.
 * - 예시: Java, C++, C#
 * - 장점: 객체라는 단위로 묶이므로 코드 재사용성, 확장성, 유지보수성,우수. 대규모 시스템 설계에 적합
 * - 단점: 과도한 객체 분리나 복잡한 상속 구조 등으로 인해 오히려 복잡도가 증가할 수 있음
 *
 *
 * 선언형 프로그래밍 (Declarative Programming)
 * 핵심 개념 : "무엇을(What) 할 것인지"를 기술하고, "어떻게(How)"구현, 실행될지는 위임하는 방식
 * 특징
 * - 구체적인 제어 흐름(조건문, 반복문 등)을 직접 장성하기보다, 원하는 결과나 조건을 선언적으로 표현
 * - 상태 변화보다는 결과에 초점을 맞추어 코드를 작성
 * - 대표적인 예시: SQL(쿼리로 원하는 데이터나 조건을 선언), HTML(화면 구조/콘텐츠만 기술하면 브라우저가 렌더링)
 * - 함수형 프로그래밍 등이 선언형 패러다임에 속하거나 밀접하게 관련됨
 * 장단점
 * - 장점: 구현의 복잡한 로직을 많이 숨길 수 있어, 높은 수준에서 문제 해결에 집중 가능. 비즈니스 로직을 직관적으로 표현하기 쉬움
 * - 단점: 언어나 환경이 제공하는 추상화 수준에 의존적이며, 내부 동작이 보이지 않을 경우 디버깅이 어려울 수 있음. 낮은 수준의 최적화나 세밀한 제어가 필요한 상황에서는 제약이 생길 수도 있음
 *
 * 함수형 프로그래밍 (Functional Programming)
 * 핵심 개념 : 무엇(What)을 할 것인지를 수학적 함수(Function)들로 구성하고, 부수 효과(Side Effect) 최소화 및 불변성 (Immutable State)을 강조하는 프로그래밍 방식
 * 특징
 * - 선언형(Declarative) 접근에 가까움: "어떻게"가 아니라, "어떤 결과"를 원한다고 선언
 * - 순수 함수(Pure Function)를 중시: 같은 입력이 주어지면 항상 같은 출력
 * - 데이터는 불변(Immutable)하게 처리: 재할당 대신 새로운 데이터를 만들어 반환
 * - 함수가 일급 시민(First-Class Citizen)으로 취급: 고차 함수(Higher-Order Function), 함수를 인자로 넘기거나 반환 가능
 * - 예시: Haskell, Clojure, Scala, Java(람다와 함수형 인터페이스를 통한 부분 지원)
 *
 * 장단점
 * - 장점 : 상태 변화가 없거나 최소화 되므로 디버깅과 테스트 용이, 병렬 처리 및 동시성 처리가 간단해지는 경향
 * - 단점 : 명령형 사고방식에 익숙한 프로그래머에게는 초기 접근이 어려울 수 있음, 계산 과정에서의 메모리 사용이 증가할 수 있음
 *
 * 정리
 * - 명령형 프로그래밍: 컴퓨터가 실행할 단계별 명령을 직접 제어하고 기술
 *  - 절차지향 프로그래밍 : 명령형 패러다임 안에서 프로그램을 함수(프로시저) 단위로 분할하여 개발
 *  - 객체지향 프로그래밍 : 데이터와 함수를 객체라는 단위로 묶어 추상화하고 상호작용
 * - 선언형 프로그래밍 : 무엇(What)을 해야하는지에 집중하여, 구체적인 구현 방식이나 절차 흐름을 추상화하고 선언적으로 기술
 *  - 함수형 프로그래밍: 순수 함수와 불변성에 기반하여, 선언적으로 로직을 기술
 *
 *
 *
 */